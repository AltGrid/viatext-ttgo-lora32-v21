# viatext-ttgo-lora32-v21

**Development Notice:** This project is **not production-ready**. It is still in active development, with interfaces, logic, and documentation subject to change.

To clone with submodules:

```bash
git clone --recurse-submodules https://github.com/AltGrid/viatext-ttgo-lora32-v21
```

*The front line on the wire. The physical node in your hand.*

![VIATEXT Logo](viatext.png)

This is the firmware and configuration package for ViaText-compatible **[LilyGO TTGO LoRa32 V2.1](https://lilygo.cc/products/lora3)** boards.  
It transforms a low-cost ESP32 device into a resilient, autonomous communication node — part of a text-first mesh that doesn’t rely on the cloud, smartphones, or traditional infrastructure.

This repo runs on **PlatformIO**, targeting the ESP32/LoRa chipset with a focus on durability, transparency, and full Linux-side compatibility via serial links.

---

## System Role and Identity

`viatext-ttgo-lora32-v21` is a physical, field-deployable node in the ViaText mesh.  
It sends, receives, and relays human-readable packets using the LoRa radio band, optionally augmented by GPS, OLED display, and battery status monitoring.

Each node:
- Runs lightweight C++ firmware using `viatext-core`
- Reads/writes packets over LoRa
- Interfaces with Linux hosts via USB serial (`/dev/ttyUSB*`)
- Operates headless or with optional display feedback

This hardware is critical in scenarios where standard infrastructure is absent or compromised. Every decision in its design supports the principles of Simplicity, Portability, and Autonomy.

---

## Scope and Principles

### Guiding Principles
1. **Simplicity** — Understandable by anyone with basic Linux and electronics skills.  
2. **Portability** — Operates anywhere: mountaintops, basements, backpacks.  
3. **Autonomy** — Requires no cloud services, smartphones, or central servers.

### Operational Model
- **Transport-Agnostic** — USB and LoRa are treated equally as message ingress.  
- **Unified Flow** — RX -> Core processing -> TX on all other transports + local echo.  
- **Linux Integration** — `/dev/ttyUSB*` devices work with standard CLI tools.  
- **Self-Describing Packets** — Plaintext STAMP + Markdown body, optional encryption.

### Hardware Scope
- **Required** — LilyGO TTGO LoRa32 V2.1 board, SX1276 LoRa radio, USB connection.  
- **Optional** — OLED, GPS, LiPo battery.  
- **Form Factor** — Credit card-sized; supports 3D-printed enclosures.

### Firmware Scope
- **Base** — PlatformIO targeting `esp32dev` / `ttgo-lora32-v21`.  
- **Core Dependency** — `viatext-core` submodule.  
- **Dependencies** — `LoRa.h`, `HardwareSerial`, optional `U8g2lib`, `TinyGPS++`.  
- **CLI/Host Compatibility** — Fully interoperable with `viatext-cli`.

### Relay and Routing
- Receive -> Re-transmit -> Echo.  
- TTL/Dup Guard prevents infinite loops.  
- Future: Routing cache, time sync, SD store/forward.

### Test Targets
1. Send from Linux CLI -> LoRa32 via USB.  
2. Node transmits via LoRa -> Peer node receives & echoes to USB.  
3. Linux host sees packet via `cat /dev/ttyUSB*`.  

Acceptance: intact `from`, `to`, `seq`, `ttl`.

---

## Repository Structure

This repository contains the firmware and configuration for the LilyGO TTGO LoRa32 V2.1 ViaText node.  
It **includes the complete `viatext-core` library** as a Git submodule under `external/viatext-core`.

Top-level layout:

```
viatext-ttgo-lora32-v21/
├── external/viatext-core/       # Core ViaText C++ library (submodule)
│   ├── AI/                      # AI-assisted docs & blueprints
│   ├── cli/                     # Command-line wrapper for Linux
│   ├── include/viatext/         # Public headers for core, message formats, transports
│   ├── src/                     # Core logic implementations
│   ├── tests/                   # Unit tests for core library
│   ├── third_party/             # Vendored dependencies (ETL, CLI11, etc.)
│   ├── LICENSE / README.md      # Core project license and docs
│   └── ... (see core repo for full detail)
├── include/                     # Project-specific headers
├── lib/                         # Optional local libraries (e.g. TextBridge extensions)
├── src/                         # Main firmware entry point for TTGO
├── test/                        # Local firmware tests (if applicable)
├── platformio.ini               # PlatformIO configuration
├── LICENSE                      # Project license
└── README.md                    # This file
```

---

## PlatformIO Setup

This project is designed for **PlatformIO**, which handles toolchain, libraries, and device upload.

```bash
pio run -e ttgo-lora32-v21
pio run -e ttgo-lora32-v21 -t upload
pio device monitor -b 115200
```

USB-serial console shows logs and STAMP parsing.  
On Linux, ensure `/dev/ttyUSB*` permissions are set:  
```bash
sudo usermod -a -G dialout $USER
```

---

## Project Goals

- Provide a **reliable ViaText node** for field deployment.
- Serve as **reference firmware** for future boards (Heltec, RAK, etc.).
- Allow fully-offline operation and durable delivery.
- Support relay behavior via simple forwarding logic.
- Stay **entirely compatible with `viatext-core`**.

---

## Future Features

- OLED UI modes (debug / delivery / sleep)
- Long-range test modes
- Routing table cache
- Time sync pulse (`vt-heartbeat`)
- SD card store/forward
- GPS stamping (optional)

---

## Note on AI Assistance

Parts of this README and supporting scaffolds were created with assistance from **ChatGPT** and **GitHub Copilot** to speed up drafting and formatting.  
All logic, architectural decisions, and debugging are carried out by a human developer.  
ViaText is built to be **human-readable** and **machine-compatible** — in both its code and its documentation.
